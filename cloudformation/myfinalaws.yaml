AWSTemplateFormatVersion: "2010-09-09"
Description:  This template is my final project

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: Kyial

  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: PublicSubnet1 cidr for first availability zone
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: PublicSubnet1 cidr for second availability zone
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet1CIDR:
    Description: PrivateSubnet1 cidr for first availability zone
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet2CIDR:
    Description: PrivateSubnet1 cidr for second availability zone
    Type: String
    Default: 10.0.3.0/24
  
  InstanceTypeKyial:
    Type: String
    AllowedValues:
      - "t2.micro"
      - "t3.micro"
    Default: "t2.micro"

  TypeELB:
    Type: String
    AllowedValues:
      - application
      - network
      - gateway
    Default: application

Mappings:
  AmiMapping:
    us-east-1:
      AmiId: ami-0c101f26f147fa7fd #Virginia
    us-west-2:
      AmiId: ami-019f9b3318b7155c5 #Ohio
    us-west-1:
      AmiId: ami-0d5ae304a0b933620 #California
    us-west-2:
      AmiId: ami-0a70b9d193ae8a799 #Oregon   

# Conditions: 
#   isKyial: !Equals [ !Ref EnvironmentName, 'Kyial']

Resources:
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityName: Mysecuritygroup
      GroupDescription: Test Security Group
      GroupName: KyialSecurity
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22 
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref MyVPC
      Tags:
        - Key: Owner
          Value: !Ref EnvironmentName   

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Owner
          Value: !Ref EnvironmentName

  MyKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: MyKeyPair
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Owner
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MyVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: NatGateway1EIP
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Onwer
          Value: !Ref EnvironmentName
  
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc       

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2  

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      LaunchTemplateData:
        DisableApiTermination: true
        ImageId: !FindInMap [ AmiMapping, !Ref "AWS::Region", AmiId ]
        InstanceType: !Ref InstanceTypeKyial    #!If [ isKyial, "t2.micro", "t3.micro" ]
        KeyName: !Ref MyKeyPair
        SecurityGroupIds:
          - !Ref MySecurityGroup
        UserData: !Base64 |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          cat <<EOF > /var/www/html/index.html
          <!DOCTYPE html>
          <html lang="ru">
          <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>website</title>
          <style>
            body {
              margin: 0;
              padding: 0;
              background-image: url('https://images.pexels.com/photos/844297/pexels-photo-844297.jpeg');
              background-size: cover;
              background-position: center;
              font-family: Arial, sans-serif;
              text-align: center;
              color: black;
            }

            .welcome-text {
              position: absolute;
              top: 50%;
              left: 50%;
              transform: translate(-50%, -50%);
              font-size: 32px;
            }
          </style>
          </head>
          <body>
          <div class="welcome-text">
          <h1>Welcome to $HOSTNAME </h1>
          </div>
          </body>
          </html>
          EOF
          systemctl restart httpd
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Owner
              Value: !Ref EnvironmentName
    
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      VpcId: !Ref MyVPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200
      Tags:
        - Key: Owner
          Value: !Ref EnvironmentName
  
  MyELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyELB
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
         - !Ref MySecurityGroup
      Tags:
        - Key: Owner
          Value: !Ref EnvironmentName

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyELB
      Port: 80
      Protocol: HTTP

  MyAutoScalingGroup1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: MyASG1
      MinSize: '2'
      MaxSize: '4'
      DesiredCapacity: '2'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateName: MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !GetAtt MyTargetGroup.TargetGroupArn
      Tags: 
        - Key: Owner
          Value: !Ref EnvironmentName
          PropagateAtLaunch: true
        - Key: Name
          Value: LTKyial
          PropagateAtLaunch: true


  # MyAutoScalingGroup2:
  #   Type: AWS::AutoScaling::AutoScalingGroup
  #   Properties:
  #     AutoScalingGroupName: MyASG2
  #     MinSize: '1'
  #     MaxSize: '4'
  #     DesiredCapacity: '1'
  #     VPCZoneIdentifier:
  #       - !Ref PublicSubnet1
  #       - !Ref PublicSubnet2
  #     LaunchTemplate:
  #       LaunchTemplateName: MyLaunchTemplate
  #       Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
  #     TargetGroupARNs:
  #       - !GetAtt MyTargetGroup.TargetGroupArn
  #     Tags: 
  #       - Key: Name
  #         Value: !Ref EnvironmentName
  #         PropagateAtLaunch: true
        
Outputs:
  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !GetAtt MyELB.DNSName
  
  VPC:
    Description: A reference to the created VPC
    Value: !Ref MyVPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  MySecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref MySecurityGroup

    #look is my codding
    jfhdh
    git add