AWSTemplateFormatVersion: "2010-09-09"
Description: "My final project is finished"
Mappings:
  AmiMapping:
    us-east-1:
      AmiId: ami-0d7a109bf30624c99
    us-west-2:
      AmiId: ami-07bff6261f14c3a45
Parameters:
  EnvironmentName:
    Type: String
    Default: robia

  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.10.0/24

  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.11.0/24

  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.20.0/24

  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.21.0/24

  InstanceType:
    Description: The EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: MyVPC
    Properties:
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName}-InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: InternetGateway
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MyVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  ElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: PublicSubnet1
    Properties:
      ConnectivityType: public
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !GetAtt PublicSubnet1.SubnetId
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName}-NatGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName}-PublicRouteTable

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: DefaultPublicRoute
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: DefaultPublicRoute
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName}-PrivateRouteTable

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: DefaultPrivateRoute
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: DefaultPrivateRoute
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  MyKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: MyKeyPair

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: MyVPC
    Properties:
      GroupName: !Sub ${EnvironmentName}-SecurityGroup
      GroupDescription: "Security group with HTTP ingress rule"
      VpcId: !Ref MyVPC

  HTTPIngressSecurityGroupRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MySecurityGroup
    Properties:
      CidrIp: 0.0.0.0/0
      Description: "Allow HTTP"
      GroupId: !Ref MySecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80

  SSHIngressSecurityGroupRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MySecurityGroup
    Properties:
      CidrIp: 0.0.0.0/0
      Description: "Allow SSH"
      GroupId: !Ref MySecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  myLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: MySecurityGroup
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-LaunchTemplate
      LaunchTemplateData:
        ImageId: !FindInMap [AmiMapping, !Ref "AWS::Region", AmiId]
        InstanceType: !Ref InstanceType
        KeyName: !Ref MyKeyPair
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: false
            Groups:
              - !Ref MySecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<h1>Hello Robia!My hostname is $HOSTNAME</h1>" > /var/www/html/index.html

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: InternetGatewayAttachment
    Properties:
      Name: !Sub ${EnvironmentName}-LoadBalancer
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt MySecurityGroup.GroupId
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Owner
          Value: !Ref EnvironmentName

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-TargetGroup
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      Port: 80
      Protocol: HTTP
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      TargetType: instance
      Matcher:
        HttpCode: "200"
      VpcId: !Ref MyVPC

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: TargetGroup
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  myAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: myLaunchTemplate
    Description: "It is AutoScalingGroup"
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-AutoScaleGroup
      DesiredCapacity: 2
      MinSize: 2
      MaxSize: 5
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate
        Version: !GetAtt myLaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

Outputs:
  MyVPC:
    Description: A reference to the created VPC
    Value: !Ref MyVPC

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  HTTPIngressSecurityGroup:
    Description: A reference to the Security Group allowing HTTP only inbound
    Value: !Ref MySecurityGroup

  myLaunchTemplate:
    Description: A reference to the Launch Template
    Value: !Ref myLaunchTemplate

  myAutoScalingGroup:
    Description: A reference to the Auto Scaling Group
    Value: !Ref myAutoScalingGroup

  ApplicationLoadBalancer:
    Description: A reference to the Application Load Balancer
    Value: !Ref ApplicationLoadBalancer

  LoadBalancerURL:
    Description: The URL of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
